/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aegs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author HP
 */
public class ExaminarResult extends javax.swing.JPanel {

    /**
     * Creates new form ExaminarResult
     */
    Connection con;
    Statement st;
    ResultSet rs;
    ArrayList<Object []> row;
    
    public ExaminarResult() {
        initComponents();
        initDb();
        loadCourse();
    }

     private void initDb() {
        try {
            new Database();
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AEGS", "root", "");
            st = con.createStatement();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Connecting to the Database\nConnect the DBMS and run the application again!");
            System.exit(0);
            ex.printStackTrace();
        }
    }
     
     private void loadCourse()
     {
        try {
            rs = st.executeQuery("Select course_id From course");
            
            while(rs.next())
            {
                course.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ExaminarResult.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
    private void addResult()
    {
        try {
            row = new ArrayList<>();
            Object [] record;
            rs = st.executeQuery("Select matric, course_id, grade, time From score Where course_id ='" + course.getSelectedItem().toString() + "'");
            
            while(rs.next())
            {
                record = new Object[4];
                record[0] = rs.getString(1);
                record[1] = rs.getString(2);
                record[2] = rs.getString(3);
                record[3] = rs.getString(4);
                row.add(record);
            }
            result.setModel(new MyTable(row));
        } catch (SQLException ex) {
            Logger.getLogger(Course.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        course = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student Result Page", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        setMaximumSize(new java.awt.Dimension(1100, 500));
        setMinimumSize(new java.awt.Dimension(1100, 500));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Course To View Result:");

        course.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Course" }));
        course.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseItemStateChanged(evt);
            }
        });

        result.setBackground(new java.awt.Color(153, 204, 255));
        result.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        result.setForeground(new java.awt.Color(255, 0, 0));
        result.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Matric No.", "Course Code", "Exam Score", "Exam Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        result.setFillsViewportHeight(true);
        result.setRowHeight(20);
        jScrollPane1.setViewportView(result);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(321, 321, 321))
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void courseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseItemStateChanged
        // TODO add your handling code here:
        addResult();
    }//GEN-LAST:event_courseItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox course;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable result;
    // End of variables declaration//GEN-END:variables

    private static class MyTable extends AbstractTableModel {

        ArrayList<Object []> row;
        Object [] col = new Object[]{"Matric No.","Course Code", "Course Grade", "Exam Time"};
        Class[] types = new Class [] {java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class};

        private MyTable(ArrayList<Object []> row) {
            this.row = row;
        }
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        public String getColumnName(int col) {
            return (String) this.col[col];
        }

        public int getRowCount() {
            return row.size();
        }

        public int getColumnCount() {
            return col.length;
        }

        public Object getValueAt(int row, int col) {
            return this.row.get(row)[col];
        }

        public void setValueAt(Object value, int row, int col) {
            this.row.get(row)[col] = value;
            fireTableCellUpdated(row, col);
        }

    }
}
