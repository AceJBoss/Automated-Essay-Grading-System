/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aegs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author HP
 */
public class Result extends javax.swing.JPanel {

    /**
     * Creates new form Result
     */
    Connection con;
    Statement st;
    ResultSet rs;
    ArrayList<Object []> row;
    
    public Result() {
        initComponents();
        initDb();
        addResult();
    }

    private void initDb() {
        try {
            new Database();
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AEGS", "root", "");
            st = con.createStatement();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Connecting to the Database\nConnect the DBMS and run the application again!");
            System.exit(0);
            ex.printStackTrace();
        }
    }
    private void addResult()
    {
        try {
            row = new ArrayList<>();
            Object [] record;
            rs = st.executeQuery("Select course_id, grade, time From score Where matric ='" + Student.mat + "'");
            
            while(rs.next())
            {
                record = new Object[3];
                record[0] = rs.getString(1);
                record[1] = rs.getString(2);
                record[2] = rs.getString(3);
                row.add(record);
            }
            result.setModel(new MyTable(row));
        } catch (SQLException ex) {
            Logger.getLogger(Course.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Scroll = new javax.swing.JScrollPane();
        result = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student Result Page", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        setMaximumSize(new java.awt.Dimension(778, 503));
        setMinimumSize(new java.awt.Dimension(778, 503));

        Scroll.setBackground(new java.awt.Color(153, 204, 255));
        Scroll.setMaximumSize(new java.awt.Dimension(688, 452));
        Scroll.setMinimumSize(new java.awt.Dimension(688, 452));
        Scroll.setPreferredSize(new java.awt.Dimension(688, 452));

        result.setBackground(new java.awt.Color(153, 204, 255));
        result.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        result.setForeground(new java.awt.Color(255, 0, 51));
        result.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"cse", "99", null},
                {"jav", "dlnd", "ndkf"},
                {"lnlf", "dld", "ndk kl"},
                {"knfkd", "lkvl", null}
            },
            new String [] {
                "Course Code", "Course Score", "Exam Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        result.setColumnSelectionAllowed(true);
        result.setFillsViewportHeight(true);
        result.setGridColor(new java.awt.Color(255, 255, 255));
        result.setMaximumSize(new java.awt.Dimension(300, 64));
        result.setMinimumSize(new java.awt.Dimension(300, 64));
        result.setRowHeight(20);
        result.getTableHeader().setReorderingAllowed(false);
        Scroll.setViewportView(result);
        result.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (result.getColumnModel().getColumnCount() > 0) {
            result.getColumnModel().getColumn(0).setResizable(false);
            result.getColumnModel().getColumn(0).setPreferredWidth(30);
            result.getColumnModel().getColumn(1).setResizable(false);
            result.getColumnModel().getColumn(1).setPreferredWidth(15);
            result.getColumnModel().getColumn(2).setResizable(false);
            result.getColumnModel().getColumn(2).setPreferredWidth(60);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JTable result;
    // End of variables declaration//GEN-END:variables

    private static class MyTable extends AbstractTableModel {

        ArrayList<Object []> row;
        Object [] col = new Object[]{"Course Code", "Course Grade", "Exam Time"};
        Class[] types = new Class [] {java.lang.Object.class, java.lang.Object.class, java.lang.Object.class};

        private MyTable(ArrayList<Object []> row) {
            this.row = row;
        }
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        public String getColumnName(int col) {
            return (String) this.col[col];
        }

        public int getRowCount() {
            return row.size();
        }

        public int getColumnCount() {
            return col.length;
        }

        public Object getValueAt(int row, int col) {
            return this.row.get(row)[col];
        }

        public void setValueAt(Object value, int row, int col) {
            this.row.get(row)[col] = value;
            fireTableCellUpdated(row, col);
        }

    }
}
