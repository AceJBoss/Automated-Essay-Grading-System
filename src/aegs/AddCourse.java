/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aegs;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.util.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author HP
 */
public class AddCourse extends javax.swing.JPanel {

    /**
     * Creates new form AddCourse
     */
    
    Connection con;
    Statement st;
    ResultSet rs;
    PreparedStatement ps;
    
    int total, current = 1;
    JTextField[] key;
    String value[] = {"marking guide 1.........", "marking guide 2.........", "marking guide 3.........", "marking guide 4.........", "marking guide 5........."};
    ArrayList<ArrayList<String>> index;
    ArrayList<String> row;

    public AddCourse() {

        index = new ArrayList<>();
        initComponents();
        this.key = new JTextField[]{key1, key2, key3, key4, key5};
        initDb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        course_code = new javax.swing.JTextField();
        exam_time = new javax.swing.JTextField();
        course_title = new javax.swing.JTextField();
        no_of_question = new javax.swing.JTextField();
        no_of_attempt = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        question_nav = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        key2 = new javax.swing.JTextField();
        key1 = new javax.swing.JTextField();
        key4 = new javax.swing.JTextField();
        key3 = new javax.swing.JTextField();
        mark = new javax.swing.JTextField();
        key5 = new javax.swing.JTextField();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        save_to_db = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Register New Course And Set Exam Question", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        setMaximumSize(new java.awt.Dimension(770, 500));
        setMinimumSize(new java.awt.Dimension(770, 500));
        setPreferredSize(new java.awt.Dimension(770, 500));

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Course Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N

        course_code.setText("Course Code");
        course_code.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        exam_time.setText("Exam Time in Minute");
        exam_time.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        course_title.setText("Course Title");
        course_title.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        no_of_question.setText("Total No of questions");
        no_of_question.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        no_of_attempt.setText("No of Question per Attempt");
        no_of_attempt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClicked(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(course_code, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(course_title, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(exam_time, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(no_of_question, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(no_of_attempt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(reset)
                        .addGap(18, 18, 18)
                        .addComponent(save)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(course_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(course_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exam_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(no_of_question, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(no_of_attempt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(save)))
        );

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Course Exam Questions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        question_nav.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        question_nav.setForeground(new java.awt.Color(102, 102, 255));
        question_nav.setText("Question 5  of 20");

        question.setColumns(20);
        question.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        question.setLineWrap(true);
        question.setRows(5);
        question.setWrapStyleWord(true);
        question.setEnabled(false);
        question.setOpaque(true);
        jScrollPane1.setViewportView(question);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Note: At least one of the marking guide field must be fill.");

        key2.setText("marking guide 2.........");
        key2.setEnabled(false);
        key2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        key1.setText("marking guide 1.........");
        key1.setEnabled(false);
        key1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        key4.setText("marking guide 4.........");
        key4.setEnabled(false);
        key4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        key3.setText("marking guide 3.........");
        key3.setEnabled(false);
        key3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        mark.setText("mark for this question");
        mark.setEnabled(false);
        mark.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        key5.setText("marking guide 5.........");
        key5.setEnabled(false);
        key5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddCourse.this.focusLost(evt);
            }
        });

        previous.setText("Previous");
        previous.setEnabled(false);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClicked(evt);
            }
        });

        next.setText("Next");
        next.setEnabled(false);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClicked(evt);
            }
        });

        save_to_db.setText("Save Course and Question");
        save_to_db.setEnabled(false);
        save_to_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(key1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(key2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(question_nav)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(jLabel2))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(key5, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(key3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mark, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(key4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(23, 23, 23))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48)
                                    .addComponent(save_to_db, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(question_nav)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(key1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(key4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(key5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previous)
                    .addComponent(next)
                    .addComponent(save_to_db))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void focusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGained
        // TODO add your handling code here:
        if (evt.getSource() == course_code) {
            if (course_code.getText().equals("Course Code")) {
                course_code.setText("");
            }
        } else if (evt.getSource() == course_title) {
            if (course_title.getText().equals("Course Title")) {
                course_title.setText("");
            }
        } else if (evt.getSource() == exam_time) {
            if (exam_time.getText().equals("Exam Time in Minute")) {
                exam_time.setText("");
            }
        } else if (evt.getSource() == no_of_attempt) {
            if (no_of_attempt.getText().equals("No of Question per Attempt")) {
                no_of_attempt.setText("");
            }
        } else if (evt.getSource() == no_of_question) {
            if (no_of_question.getText().equals("Total No of questions")) {
                no_of_question.setText("");
            }
        } else if (evt.getSource() == key1) {
            if (key1.getText().equals("marking guide 1.........")) {
                key1.setText("");
            }
        } else if (evt.getSource() == key2) {
            if (key2.getText().equals("marking guide 2.........")) {
                key2.setText("");
            }
        } else if (evt.getSource() == key3) {
            if (key3.getText().equals("marking guide 3.........")) {
                key3.setText("");
            }
        } else if (evt.getSource() == key4) {
            if (key4.getText().equals("marking guide 4.........")) {
                key4.setText("");
            }
        } else if (evt.getSource() == key5) {
            if (key5.getText().equals("marking guide 5.........")) {
                key5.setText("");
            }
        } else if (evt.getSource() == mark) {
            if (mark.getText().equals("mark for this question")) {
                mark.setText("");
            }
        }

    }//GEN-LAST:event_focusGained

    private void focusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusLost
        // TODO add your handling code here:
        if (evt.getSource() == course_code) {
            if (course_code.getText().equals("")) {
                course_code.setText("Course Code");
            }
        } else if (evt.getSource() == course_title) {
            if (course_title.getText().equals("")) {
                course_title.setText("Course Title");
            }
        } else if (evt.getSource() == exam_time) {
            if (exam_time.getText().equals("")) {
                exam_time.setText("Exam Time in Minute");
            }
        } else if (evt.getSource() == no_of_attempt) {
            if (no_of_attempt.getText().equals("")) {
                no_of_attempt.setText("No of Question per Attempt");
            }
        } else if (evt.getSource() == no_of_question) {
            if (no_of_question.getText().equals("")) {
                no_of_question.setText("Total No of questions");
            }
        } else if (evt.getSource() == key1) {
            if (key1.getText().equals("")) {
                key1.setText("marking guide 1.........");
            }
        } else if (evt.getSource() == key2) {
            if (key2.getText().equals("")) {
                key2.setText("marking guide 2.........");
            }
        } else if (evt.getSource() == key3) {
            if (key3.getText().equals("")) {
                key3.setText("marking guide 3.........");
            }
        } else if (evt.getSource() == key4) {
            if (key4.getText().equals("")) {
                key4.setText("marking guide 4.........");
            }
        } else if (evt.getSource() == key5) {
            if (key5.getText().equals("")) {
                key5.setText("marking guide 5.........");
            }
        } else if (evt.getSource() == mark) {
            if (mark.getText().equals("")) {
                mark.setText("mark for this question");
            }
        }
    }//GEN-LAST:event_focusLost

    private void reset(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == course_code) {
            course_code.setText("Course Code");
        } else if (evt.getSource() == course_title) {
            course_title.setText("Course Title");
        } else if (evt.getSource() == exam_time) {
            exam_time.setText("Exam Time in Minute");
        } else if (evt.getSource() == no_of_attempt) {
            no_of_attempt.setText("No of Question per Attempt");
        } else if (evt.getSource() == no_of_question) {
            no_of_question.setText("Total No of questions");
        }
    }

    private void save() {
        if (course_code.getText().matches("[a-zA-z0-9]{6}")) {
            if (exam_time.getText().matches("[0-9]+")) {
                if (no_of_question.getText().matches("[0-9]+")) {
                    if (no_of_attempt.getText().matches("[0-9]+")) {
                        if (Integer.parseInt(no_of_attempt.getText()) <= Integer.parseInt(no_of_question.getText())) {
                            //disable course registration page
                            course_code.setEnabled(false);
                            course_title.setEnabled(false);
                            exam_time.setEnabled(false);
                            no_of_attempt.setEnabled(false);
                            no_of_question.setEnabled(false);
                            save.setEnabled(false);
                            reset.setEnabled(false);
                            total = Integer.parseInt(no_of_question.getText());
                            question_nav.setText("Question " + current + " of " + total);
                            //enable question page
                            question.setEnabled(true);
                            key1.setEnabled(true);
                            key2.setEnabled(true);
                            key3.setEnabled(true);
                            key4.setEnabled(true);
                            key5.setEnabled(true);
                            mark.setEnabled(true);
                            previous.setEnabled(true);
                            next.setEnabled(true);
                            save_to_db.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "No. of attempt should be <=\nTotal no. of questions");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Enter a number to specify the\nNo of Attempt available for the student");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Enter a number to specify the\nTotal no of Question for the course");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter an Integer number to specify the\nExam time in minute");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Course Code should 6character");
        }
    }
    
    private void initDb() {
        try {
            new Database();
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AEGS", "root", "");
            st = con.createStatement();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Connecting to the Database\nConnect the DBMS and run the application again!");
            System.exit(0);
            ex.printStackTrace();
        }
    }

    private void insert() {
        try {
            //insert the course description into corse db
                String query = "Insert Into course Values(?,?,?,?)";
                ps = con.prepareStatement(query);
                ps.setString(1, course_code.getText());
                ps.setString(2, course_title.getText());
                ps.setInt(3, Integer.parseInt(exam_time.getText()));
                ps.setInt(4, Integer.parseInt(no_of_attempt.getText()));
                int a = ps.executeUpdate();

                if (a > 0) {
                    //if course description successfully added add question for each course
                    
                    for(int i=0; i<index.size(); i++)
                    {
                        query = "Insert Into question Values(?,?,?,?)";
                        ps = con.prepareStatement(query);
                        ps.setString(1, course_code.getText());
                        ps.setString(2, course_code.getText()+i);
                        ps.setString(3, index.get(i).get(0));
                        ps.setInt(4, Integer.parseInt(index.get(i).get(index.get(i).size()-1)));
                        a = ps.executeUpdate();
                        if(a > 0)
                        {
                            for(int j=1; j<index.get(i).size()-1; j++)
                            {
                                query = "Insert Into keyword Values(?,?)";
                                ps = con.prepareStatement(query);
                                ps.setString(1, course_code.getText()+i);
                                ps.setString(2, index.get(i).get(j));
                                System.out.println("Quesstion inserted 1");
                                a = ps.executeUpdate();
                                System.out.println("Quesstion inserted 2");
                                if(a > 0)
                                {
                                    System.out.println("Quesstion inserted");
                                }
                            }
                        }
                    }
                }
            
        } catch (SQLException ex) {
            Logger.getLogger(AddCourse.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void next() {
        if (current < total) {
            if (!question.getText().equals("")) {
                if (mark.getText().matches("[1-9]+")) {
                    if (!key1.getText().equals("marking guide 1.........") || !key2.getText().equals("marking guide 2.........") || !key3.getText().equals("marking guide 3.........") || !key4.getText().equals("marking guide 4.........") || !key5.getText().equals("marking guide 5.........")) {

                        row = new ArrayList<>();
                        row.add(question.getText());
                        for (int i = 0; i < value.length; i++) {
                            if (!key[i].getText().equals(value[i])) {
                                row.add(key[i].getText().toLowerCase());
                            }
                        }
                        row.add(mark.getText());
                        if(index.size() > current-1)
                            index.remove(current-1);
                        index.add(current-1,row);
                        
                        question_nav.setText("Question " + ++current + " of " + total);
                        
                        if (index.size() > current-1) {
                            question.setText(index.get(current-1).get(0));
                            for (int i = 0; i < index.get(current-1).size()-2; i++) {
                                key[i].setText(index.get(current-1).get(i + 1));
                            }
                            mark.setText(index.get(current-1).get(index.get(current-1).size() - 1));
                        } else {
                            question.setText("");
                            key1.setText("marking guide 1.........");
                            key2.setText("marking guide 2.........");
                            key3.setText("marking guide 3.........");
                            key4.setText("marking guide 4.........");
                            key5.setText("marking guide 5.........");
                            mark.setText("mark for this question");
                        }
                        
                        
                        
                       
                    } else {
                        JOptionPane.showMessageDialog(this, "At least 1 of the marking guide must be supplied");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Supply the mark for question" + current);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter question" + current);
            }
        }
    }

    private void previous() {
        if (current > 1) {
            //load all fields wit the saved data
            //reduce current and change status
            question_nav.setText("Question " + --current + " of " + total);
            question.setText(index.get(current-1).get(0));
            
            for (int i = 0; i < index.get(current-1).size()-2; i++) {
                key[i].setText(index.get(current-1).get(i + 1));
            }
            mark.setText(index.get(current-1).get(index.get(current-1).size() - 1));
        }
    }
    private void save_to_db()
    {
        if(!(total-1 > index.size()))
        {
            if (!question.getText().equals("")) {
                if (mark.getText().matches("[1-9]+")) {
                    if (!key1.getText().equals("marking guide 1.........") || !key2.getText().equals("marking guide 2.........") || !key3.getText().equals("marking guide 3.........") || !key4.getText().equals("marking guide 4.........") || !key5.getText().equals("marking guide 5.........")) {

                        row = new ArrayList<>();
                        row.add(question.getText());
                        for (int i = 0; i < value.length; i++) {
                            if (!key[i].getText().equals(value[i])) {
                                row.add(key[i].getText());
                            }
                            
                        }
                        row.add(mark.getText());
                        if(index.size() > current-1)
                            index.remove(current-1);
                        index.add(current-1,row);
                        //save to dp;
                        insert();
                        
                    } else {
                        JOptionPane.showMessageDialog(this, "At least 1 of the marking guide must be supplied");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Supply the mark for question" + current);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter question" + current);
            }
        }else
            JOptionPane.showMessageDialog(this, "Set all the questions befor you save");
            
    }
    private void buttonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClicked
        // TODO add your handling code here:
        if (evt.getSource() == reset) {
            reset(evt);
        } else if (evt.getSource() == save) {
            save();
        } else if (evt.getSource() == previous) {
            previous();
        } else if (evt.getSource() == next) {
            next();
        } else if (evt.getSource() == save_to_db) {
            save_to_db();
        }
    }//GEN-LAST:event_buttonClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField course_code;
    private javax.swing.JTextField course_title;
    private javax.swing.JTextField exam_time;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField key1;
    private javax.swing.JTextField key2;
    private javax.swing.JTextField key3;
    private javax.swing.JTextField key4;
    private javax.swing.JTextField key5;
    private javax.swing.JTextField mark;
    private javax.swing.JButton next;
    private javax.swing.JTextField no_of_attempt;
    private javax.swing.JTextField no_of_question;
    private javax.swing.JButton previous;
    private javax.swing.JTextArea question;
    private javax.swing.JLabel question_nav;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JButton save_to_db;
    // End of variables declaration//GEN-END:variables
}
